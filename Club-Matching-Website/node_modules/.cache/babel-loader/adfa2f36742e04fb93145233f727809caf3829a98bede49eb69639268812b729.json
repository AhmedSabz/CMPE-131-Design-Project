{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rishi\\\\SJSU\\\\3rd Year (Spring Semester)\\\\CMPE 131\\\\Club Matching Website\\\\club-matching-website\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Survey from './components/Survey';\nimport Navigation from './components/Navigation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [clubs, setClubs] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('All');\n  const [showSurvey, setShowSurvey] = useState(false);\n  const handleSurveyButtonClick = () => {\n    showSurvey ? setShowSurvey(false) : setShowSurvey(true);\n  };\n  const handleSurveySubmit = answers => {\n    // Here you would send the survey answers to your AI service for analysis\n    // For now, we'll just simulate recommendations based on the answers\n    // Simulated recommendations\n    const recommendedClubs = [{\n      id: 1,\n      name: 'Chess Club',\n      category: 'Strategy',\n      description: 'A club for chess enthusiasts.'\n    }, {\n      id: 2,\n      name: 'Art Club',\n      category: 'Creative',\n      description: 'A club for art lovers.'\n    }\n    // Add more recommended clubs based on the survey answers\n    ];\n    setClubs(recommendedClubs);\n    setShowSurvey(false); // Hide the survey after submission\n  };\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {\n        onSurveyButtonClick: handleSurveyButtonClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/club_survey\",\n        component: Survey\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }, this), showSurvey && /*#__PURE__*/_jsxDEV(Survey, {\n        onSurveySubmit: handleSurveySubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 22\n      }, this), !showSurvey && /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"oQ3UcxhN2e+vp0KGN6dGiBBwlis=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","BrowserRouter","Router","Route","Switch","Survey","Navigation","jsxDEV","_jsxDEV","App","_s","clubs","setClubs","selectedCategory","setSelectedCategory","showSurvey","setShowSurvey","handleSurveyButtonClick","handleSurveySubmit","answers","recommendedClubs","id","name","category","description","children","className","onSurveyButtonClick","fileName","_jsxFileName","lineNumber","columnNumber","path","component","onSurveySubmit","_c","$RefreshReg$"],"sources":["C:/Users/rishi/SJSU/3rd Year (Spring Semester)/CMPE 131/Club Matching Website/club-matching-website/src/App.js"],"sourcesContent":[" // src/App.js\n import React, { useState } from 'react';\n import './App.css';\n import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n import Survey from './components/Survey';\n import Navigation from './components/Navigation';\n\nfunction App() {\n  const [clubs, setClubs] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('All');\n  const [showSurvey, setShowSurvey] = useState(false);\n\n  const handleSurveyButtonClick = () => {\n    showSurvey ? setShowSurvey(false) : setShowSurvey(true);\n  };\n\n  const handleSurveySubmit = (answers) => {\n    // Here you would send the survey answers to your AI service for analysis\n    // For now, we'll just simulate recommendations based on the answers\n    // Simulated recommendations\n    const recommendedClubs = [\n      { id: 1, name: 'Chess Club', category: 'Strategy', description: 'A club for chess enthusiasts.' },\n      { id: 2, name: 'Art Club', category: 'Creative', description: 'A club for art lovers.' },\n      // Add more recommended clubs based on the survey answers\n    ];\n    setClubs(recommendedClubs);\n    setShowSurvey(false); // Hide the survey after submission\n  };\n\n  return (\n    <Router>\n    <div className=\"App\">\n      <Navigation onSurveyButtonClick={handleSurveyButtonClick} />\n      <Route path='/club_survey' component={Survey}/>\n      {showSurvey && <Survey onSurveySubmit={handleSurveySubmit} />}\n      {!showSurvey && (\n        <div>\n          {/* Your club filtering and display code goes here */}\n        </div>\n      )}\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAC;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAClB,SAASC,aAAa,IAAIC,MAAM,EAAEC,KAAK,EAAEC,MAAM,QAAQ,kBAAkB;AACzE,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,UAAU,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACa,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACe,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMiB,uBAAuB,GAAGA,CAAA,KAAM;IACpCF,UAAU,GAAGC,aAAa,CAAC,KAAK,CAAC,GAAGA,aAAa,CAAC,IAAI,CAAC;EACzD,CAAC;EAED,MAAME,kBAAkB,GAAIC,OAAO,IAAK;IACtC;IACA;IACA;IACA,MAAMC,gBAAgB,GAAG,CACvB;MAAEC,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,YAAY;MAAEC,QAAQ,EAAE,UAAU;MAAEC,WAAW,EAAE;IAAgC,CAAC,EACjG;MAAEH,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,UAAU;MAAEC,QAAQ,EAAE,UAAU;MAAEC,WAAW,EAAE;IAAyB;IACvF;IAAA,CACD;IACDZ,QAAQ,CAACQ,gBAAgB,CAAC;IAC1BJ,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;EACxB,CAAC;EAED,oBACER,OAAA,CAACN,MAAM;IAAAuB,QAAA,eACPjB,OAAA;MAAKkB,SAAS,EAAC,KAAK;MAAAD,QAAA,gBAClBjB,OAAA,CAACF,UAAU;QAACqB,mBAAmB,EAAEV;MAAwB;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC5DvB,OAAA,CAACL,KAAK;QAAC6B,IAAI,EAAC,cAAc;QAACC,SAAS,EAAE5B;MAAO;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,EAC9ChB,UAAU,iBAAIP,OAAA,CAACH,MAAM;QAAC6B,cAAc,EAAEhB;MAAmB;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAC5D,CAAChB,UAAU,iBACVP,OAAA;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEK,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEb;AAACrB,EAAA,CApCQD,GAAG;AAAA0B,EAAA,GAAH1B,GAAG;AAsCZ,eAAeA,GAAG;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}